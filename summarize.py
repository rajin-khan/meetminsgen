import os
import requests
from dotenv import load_dotenv

load_dotenv()
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

if not GROQ_API_KEY:
    raise ValueError("üö´ GROQ_API_KEY not found in .env")

GROQ_API_URL = "https://api.groq.com/openai/v1/chat/completions"

def format_for_summary(transcript_segments):
    dialogue = ""
    for seg in transcript_segments:
        speaker = seg.get("speaker", "Speaker")
        start = int(seg.get("start", 0))
        minute = start // 60
        second = start % 60
        time = f"[{minute:02}:{second:02}]"
        dialogue += f"{time} {speaker}: {seg['text']}\n"
    return dialogue.strip()

def call_groq(prompt, model="mixtral-8x7b-32768"):
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": model,
        "messages": [
            {"role": "system", "content": "You are a helpful meeting assistant."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.4
    }

    print("üß† Summarizing via Groq...")
    response = requests.post(GROQ_API_URL, headers=headers, json=payload)

    if response.status_code != 200:
        raise Exception(f"Groq API failed: {response.status_code} ‚Äì {response.text}")

    return response.json()["choices"][0]["message"]["content"]

def summarize_transcript_dual(transcript_segments, model="llama-3.3-70b-versatile"):
    formatted_transcript = format_for_summary(transcript_segments)

    prompt_en = f"""
You are an expert meeting assistant. Given the following meeting transcript (which may include Bangla or English), generate a structured Minutes of Meeting (MoM) in **English**, covering:

- Title
- Attendees (if possible)
- Timestamped key points
- Action items

Transcript:
```
{formatted_transcript}
```git
"""

    prompt_bn = f"""
‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶¶‡¶ï‡ßç‡¶∑ ‡¶Æ‡¶ø‡¶ü‡¶ø‡¶Ç ‡¶∏‡¶π‡¶ï‡¶æ‡¶∞‡ßÄ‡•§ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶Æ‡¶ø‡¶ü‡¶ø‡¶Ç ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü‡¶ü‡¶ø (‡¶Ø‡ßá‡¶ü‡¶ø‡¶§‡ßá ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ì ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶Æ‡¶ø‡¶∂‡ßç‡¶∞‡¶ø‡¶§ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá) ‡¶¶‡ßá‡¶ñ‡ßá ‡¶è‡¶ï‡¶ü‡¶ø **‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º** ‡¶≤‡ßá‡¶ñ‡¶æ ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶Æ‡¶ø‡¶ü‡¶ø‡¶Ç ‡¶∏‡¶æ‡¶∞‡¶æ‡¶Ç‡¶∂ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶® (Minutes of Meeting):

- ‡¶∂‡¶ø‡¶∞‡ßã‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶®
- ‡¶Ö‡¶Ç‡¶∂‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶ï‡¶æ‡¶∞‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ (‡¶Ø‡¶¶‡¶ø ‡¶¨‡ßã‡¶ù‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º)
- ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü
- ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶® ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶¨‡¶æ ‡¶∏‡¶ø‡¶¶‡ßç‡¶ß‡¶æ‡¶®‡ßç‡¶§‡¶∏‡¶Æ‡ßÇ‡¶π

‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü:
```
{formatted_transcript}
```
"""

    summary_en = call_groq(prompt_en, model=model)
    summary_bn = call_groq(prompt_bn, model=model)

    return summary_en, summary_bn